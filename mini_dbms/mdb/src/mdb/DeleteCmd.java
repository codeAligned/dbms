// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.LockMode;
import minidb.je.ExecuteHelpers;
import minidb.je.PredicateHelpers;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static minidb.je.ExecuteHelpers.READ_WRITE;

public class DeleteCmd extends Delete {

    final public static int ARG_LENGTH = 2 ;
    final public static int TOK_LENGTH = 3 ;

    public void execute () {
        
        super.execute();

//        MyDbEnv myDbEnv = new MyDbEnv();
//        Database relationDB = null;
        Database updateDB = null;

        try {
//            myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_WRITE);
//            relationDB = ExecuteHelpers.myDbEnv.getDB("relationDB", READ_WRITE);
            StringBuilder relationMetaData = new StringBuilder();
            String relationName = getRel_name().toString().trim();
            if(!ExecuteHelpers.isTablePresent(relationName, relationMetaData))
                System.err.println("\nRelation not present : " + relationName);
            Map<String, List<AstNode>> clauses = PredicateHelpers.generateClauses(relationName, getOne_rel_pred());
            List<AstNode> clausesList = clauses != null ? clauses.get(relationName) : null;
            List<String>[] data = ExecuteHelpers.getSelectData(relationMetaData.toString(), clausesList);

            Map<String, String[]> metaColumnRelation = new HashMap<String, String[]>();
            Map<String, String[]> metaColumnTypeRelation = new HashMap<String, String[]>();
            Map<String, List<String[]>> allRowsOfRelations = new HashMap<String, List<String[]>>();

            PredicateHelpers.formatData(metaColumnRelation, metaColumnTypeRelation, allRowsOfRelations, data[0]);

            int[] indices = PredicateHelpers.setIndices(metaColumnRelation, clauses, relationName);
            updateDB = ExecuteHelpers.myDbEnv.getDB(relationName+"DB", READ_WRITE);
            List<String> indexes = ExecuteHelpers.getAllIndexes(relationName);

            for(int j = 0; j < allRowsOfRelations.get(relationName).size(); j++) {
                String row[] = allRowsOfRelations.get(relationName).get(j);
                boolean updateRow = PredicateHelpers.applyLocalPredicate(metaColumnTypeRelation.get(relationName), clauses, relationName, indices, row);
                DatabaseEntry theKey = new DatabaseEntry((data[1].get(j)).getBytes("UTF-8"));
                if(updateRow) {
                    updateDB.delete(ExecuteHelpers.txn, theKey);
                    for(int i = 0; i < metaColumnRelation.get(relationName).length; i++) {
                        String relPlusColumnName = metaColumnRelation.get(relationName)[i];
                        Database indexDB = null;
                        if(indexes.contains(relPlusColumnName)) {
                            try{
                                indexDB = ExecuteHelpers.myDbEnv.getDB(relPlusColumnName + "DB", READ_WRITE);
                                //Remove old
                                DatabaseEntry tempData = new DatabaseEntry();
                                DatabaseEntry indexKey = new DatabaseEntry(ExecuteHelpers.bytify(row[i])); // row[i] is value
                                indexDB.get(ExecuteHelpers.txn, indexKey, tempData, LockMode.DEFAULT);
                                if(tempData.getSize() != 0) {
                                    ByteArrayInputStream bais = new ByteArrayInputStream(tempData.getData());
                                    DataInputStream in = new DataInputStream(bais);
                                    ByteArrayOutputStream bOutput = new ByteArrayOutputStream();
                                    DataOutputStream out = new DataOutputStream(bOutput);
                                    while (in.available() > 0) {
                                        String storedData = in.readUTF();
                                        if(!storedData.equals(data[1].get(j))) out.writeUTF(storedData);
                                    }
                                    indexDB.put(ExecuteHelpers.txn, indexKey, new DatabaseEntry(bOutput.toByteArray()));
                                }
                            } finally {
                                if(indexDB != null) indexDB.close();
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
//            if(relationDB != null) relationDB.close();
            if(updateDB != null) updateDB.close();
//            myDbEnv.close();
        }

    }

    public AstToken getDELETE () {
        
        return (AstToken) tok [0] ;
    }

    public One_rel_pred getOne_rel_pred () {
        
        return (One_rel_pred) arg [1] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [2] ;
    }

    public AstToken getWHERE () {
        
        return (AstToken) tok [1] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, true} ;
    }

    public DeleteCmd setParms
    (AstToken tok0, Rel_name arg0, AstToken tok1, One_rel_pred arg1, AstToken tok2)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* DELETE */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* WHERE */
        arg [1] = arg1 ;            /* One_rel_pred */
        tok [2] = tok2 ;            /* SEMI */
        
        InitChildren () ;
        return (DeleteCmd) this ;
    }

}
