// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import minidb.je.ExecuteHelpers;
import minidb.je.MyDbEnv;

import static minidb.je.ExecuteHelpers.READ_WRITE;

public class IndxDecl extends Decl_ind {

    final public static int ARG_LENGTH = 1 ;
    final public static int TOK_LENGTH = 2 ;

    public void execute () {
        
        super.execute();

        String rel = getRel_dot_field().arg[0].toString().trim();
        String col = getRel_dot_field().arg[1].toString().trim();
        String relationName = rel + "." + col;

        //Check if index is already present
        MyDbEnv myDbEnv = new MyDbEnv();
        Database relationDB = null;
        try {
            myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_WRITE);
            relationDB = myDbEnv.getDB("relationDB", READ_WRITE);
            if(ExecuteHelpers.isTablePresent(relationDB, relationName)) {
                System.err.println("\nIndex already present : " + relationName);
                return;
            }
            //create rel.col table
            DatabaseEntry metaData = new DatabaseEntry();
            if(!ExecuteHelpers.isTablePresent(relationDB, rel, metaData)) {
                System.err.println("\nTable doesn't exist : " + rel);
                return;
            }

            DatabaseEntry theKey = new DatabaseEntry((relationName).getBytes("UTF-8"));
            String indexMetaData = relationName+",pm_keys:str";
            DatabaseEntry theData = new DatabaseEntry((indexMetaData).getBytes("UTF-8"));

            relationDB.put(null, theKey, theData);

            //fill it up
            ExecuteHelpers.populateIndex(relationName, metaData);
//            System.out.println("Successfully created index ... " + relationName);
            ExecuteHelpers.allRelations = ExecuteHelpers.getAllRowsOfTable("relationDB");
        } catch (Exception e) {
            e.printStackTrace();
        }  finally {
            if(relationDB != null) relationDB.close();
            myDbEnv.close();
        }
    }

    public AstToken getINDEX () {
        
        return (AstToken) tok [0] ;
    }

    public Rel_dot_field getRel_dot_field () {
        
        return (Rel_dot_field) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [1] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true} ;
    }

    public IndxDecl setParms (AstToken tok0, Rel_dot_field arg0, AstToken tok1) {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* INDEX */
        arg [0] = arg0 ;            /* Rel_dot_field */
        tok [1] = tok1 ;            /* SEMI */
        
        InitChildren () ;
        return (IndxDecl) this ;
    }

}
