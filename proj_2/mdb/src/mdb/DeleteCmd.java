// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import minidb.je.ExecuteHelpers;
import minidb.je.MyDbEnv;
import minidb.je.PredicateHelpers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static minidb.je.ExecuteHelpers.READ_WRITE;

public class DeleteCmd extends Delete {

    final public static int ARG_LENGTH = 2 ;
    final public static int TOK_LENGTH = 3 ;

    public void execute () {
        
        super.execute();

        MyDbEnv myDbEnv = new MyDbEnv();
        Database relationDB = null;
        Database updateDB = null;

        try {
            myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_WRITE);
            relationDB = myDbEnv.getDB("relationDB", READ_WRITE);
            DatabaseEntry relationMetaData = new DatabaseEntry();
            String relationName = getRel_name().toString().trim();
            if(!ExecuteHelpers.isTablePresent(relationDB, relationName, relationMetaData))
                System.err.println("\nRelation not present : " + relationName);
            List<String>[] data = ExecuteHelpers.getSelectData(new String(relationMetaData.getData(), "UTF-8"));
            Map<String, String[]> metaColumnRelation = new HashMap<String, String[]>();
            Map<String, String[]> metaColumnTypeRelation = new HashMap<String, String[]>();
            Map<String, List<String[]>> allRowsOfRelations = new HashMap<String, List<String[]>>();

            PredicateHelpers.formatData(metaColumnRelation, metaColumnTypeRelation, allRowsOfRelations, data[0]);

//            List<String> fromRelations = new ArrayList<String>(); fromRelations.add(relationName);
            Map<String, List<AstNode>> clauses = PredicateHelpers.generateClauses(relationName, getOne_rel_pred());

            int[] indices = PredicateHelpers.setIndices(metaColumnRelation, clauses, relationName);
            updateDB = myDbEnv.getDB(relationName+"DB", READ_WRITE);

            for(int j = 0; j < allRowsOfRelations.get(relationName).size(); j++) {
                String row[] = allRowsOfRelations.get(relationName).get(j);
                boolean updateRow = PredicateHelpers.applyLocalPredicate(metaColumnTypeRelation.get(relationName), clauses, relationName, indices, row);
                DatabaseEntry theKey = new DatabaseEntry((data[1].get(j)).getBytes("UTF-8"));
                if(updateRow) updateDB.delete(null, theKey);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if(relationDB != null) relationDB.close();
            if(updateDB != null) updateDB.close();
            myDbEnv.close();
        }

    }

    public AstToken getDELETE () {
        
        return (AstToken) tok [0] ;
    }

    public One_rel_pred getOne_rel_pred () {
        
        return (One_rel_pred) arg [1] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [2] ;
    }

    public AstToken getWHERE () {
        
        return (AstToken) tok [1] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, true} ;
    }

    public DeleteCmd setParms
    (AstToken tok0, Rel_name arg0, AstToken tok1, One_rel_pred arg1, AstToken tok2)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* DELETE */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* WHERE */
        arg [1] = arg1 ;            /* One_rel_pred */
        tok [2] = tok2 ;            /* SEMI */
        
        InitChildren () ;
        return (DeleteCmd) this ;
    }

}
