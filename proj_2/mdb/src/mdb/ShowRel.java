// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import minidb.je.ExecuteHelpers;

import static minidb.je.ExecuteHelpers.READ_ONLY;

public class ShowRel extends Show {

    final public static int ARG_LENGTH = 1 ;
    final public static int TOK_LENGTH = 2 ;

    public void execute () {
        
        super.execute();

        System.out.println(showDescOfRelation(getRel_name().toString().trim()));
    }

    private String showDescOfRelation(String relationName) {
//        MyDbEnv myDbEnv = new MyDbEnv();
        Database relationDB = null;
//        myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_ONLY);
        try{
            relationDB = ExecuteHelpers.myDbEnv.getDB("relationDB", READ_ONLY);

            StringBuilder dataEntry = new StringBuilder();
            boolean isRelPresent = ExecuteHelpers.isTablePresent(relationName, dataEntry);
            if(isRelPresent)
                return renderDataEntry(dataEntry);
            else
                return "Relation "+getRel_name()+" not present";
        } finally {
            if(relationDB != null) relationDB.close();
        }
    }

    private String renderDataEntry(StringBuilder dataEntry) {
        StringBuffer sb = new StringBuffer();
//        try {
            String data = new String(dataEntry);
            ShowDb.renderDescOfSingleRelation(sb, data);
//        } catch (UnsupportedEncodingException e) {
//            e.printStackTrace();
//        }
        return sb.toString();
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [1] ;
    }

    public AstToken getSHOW () {
        
        return (AstToken) tok [0] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true} ;
    }

    public ShowRel setParms (AstToken tok0, Rel_name arg0, AstToken tok1) {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* SHOW */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* SEMI */
        
        InitChildren () ;
        return (ShowRel) this ;
    }

}
