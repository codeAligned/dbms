// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import minidb.je.ExecuteHelpers;
import minidb.je.MyDbEnv;

import java.io.UnsupportedEncodingException;

import static minidb.je.ExecuteHelpers.READ_WRITE;

public class InsertCmd extends Insert {

    final public static int ARG_LENGTH = 2 ;
    final public static int TOK_LENGTH = 6 ;

    public void execute () {

        super.execute();
        String relName = getRel_name().toString().trim();

        MyDbEnv myDbEnv = new MyDbEnv();
        myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_WRITE);
        Database relationDB = myDbEnv.getDB("relationDB", READ_WRITE);

        if(!ExecuteHelpers.isTablePresent(relationDB, relName)) {
            System.out.println(relName + " is not created. Please first create it! :|");
            return;
        }
        relationDB.close();

        StringBuffer dataString = new StringBuffer();
        AstCursor c = new AstCursor();
        for (c.FirstElement(getLiteral_list()); c.MoreElement(); c.NextElement()) {
            String data = c.node.toString().trim().replaceAll(",", "&&");
//            if(data.charAt(0) == '"' && data.charAt(data.length()-1) == '"')
//                data = data.replaceAll("^\"|\"$", "");
            dataString.append(data+",");
        }
        dataString = dataString.deleteCharAt(dataString.length()-1);

        Database insertDB = null;
        try {
            DatabaseEntry theKey = new DatabaseEntry(((System.currentTimeMillis() / 1000L) + dataString.toString()).getBytes("UTF-8"));
            DatabaseEntry theData = new DatabaseEntry(dataString.toString().getBytes("UTF-8"));

            insertDB = myDbEnv.getDB(relName + "DB", READ_WRITE);
            insertDB.put(null, theKey, theData);

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } finally {
            insertDB.close();
            myDbEnv.close();
        }

    }

    public AstToken getINSERT () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getINTO () {
        
        return (AstToken) tok [1] ;
    }

    public AstToken getLP () {
        
        return (AstToken) tok [3] ;
    }

    public Literal_list getLiteral_list () {
        
        return (Literal_list) arg [1] ;
    }

    public AstToken getRP () {
        
        return (AstToken) tok [4] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [5] ;
    }

    public AstToken getVALUES () {
        
        return (AstToken) tok [2] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, true, false, true, true, false, true, true} ;
    }

    public InsertCmd setParms
    (AstToken tok0, AstToken tok1, Rel_name arg0, AstToken tok2, AstToken tok3, Literal_list arg1, AstToken tok4, AstToken tok5)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* INSERT */
        tok [1] = tok1 ;            /* INTO */
        arg [0] = arg0 ;            /* Rel_name */
        tok [2] = tok2 ;            /* VALUES */
        tok [3] = tok3 ;            /* LP */
        arg [1] = arg1 ;            /* Literal_list */
        tok [4] = tok4 ;            /* RP */
        tok [5] = tok5 ;            /* SEMI */
        
        InitChildren () ;
        return (InsertCmd) this ;
    }

}
