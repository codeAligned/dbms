// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import minidb.je.ExecuteHelpers;
import minidb.je.MyDbEnv;
import minidb.je.PredicateHelpers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static minidb.je.ExecuteHelpers.READ_WRITE;

public class UpdateCmd extends Update {

    final public static int ARG_LENGTH = 3 ;
    final public static int TOK_LENGTH = 4 ;

    public void execute () {
        
        super.execute();

        MyDbEnv myDbEnv = new MyDbEnv();
        Database relationDB = null;
        Database updateDB = null;

        try {
            myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_WRITE);
            relationDB = myDbEnv.getDB("relationDB", READ_WRITE);
            DatabaseEntry relationMetaData = new DatabaseEntry();
            String relationName = getRel_name().toString();
            if(!ExecuteHelpers.isTablePresent(relationDB, relationName, relationMetaData))
                System.err.println("\nRelation not present : " + relationName);
            List<String>[] data = ExecuteHelpers.getSelectData(new String(relationMetaData.getData(), "UTF-8"));
            Map<String, String[]> metaColumnRelation = new HashMap<String, String[]>();
            Map<String, String[]> metaColumnTypeRelation = new HashMap<String, String[]>();
            Map<String, List<String[]>> allRowsOfRelations = new HashMap<String, List<String[]>>();

            PredicateHelpers.formatData(metaColumnRelation, metaColumnTypeRelation, allRowsOfRelations, data[0]);

            List<String> fromRelations = new ArrayList<String>(); fromRelations.add(relationName);
            Map<String, List<AstNode>> clauses = PredicateHelpers.generateClauses(fromRelations, getOne_rel_pred());
            Map<String, List<AstNode>> assigns = PredicateHelpers.generateClauses(fromRelations, getAssign_list());

            int[] indices = PredicateHelpers.setIndices(metaColumnRelation, clauses, relationName);
            int[] assignIndices = PredicateHelpers.setIndices(metaColumnRelation, assigns, relationName);
            updateDB = myDbEnv.getDB(relationName+"DB", READ_WRITE);

            for(int j = 0; j < allRowsOfRelations.get(relationName).size(); j++) {
                String row[] = allRowsOfRelations.get(relationName).get(j);
                boolean updateRow = PredicateHelpers.applyLocalPredicate(metaColumnTypeRelation.get(relationName), clauses, relationName, indices, row);
                if(updateRow)
                    for(int i = 0; i < assignIndices.length; i++)
                        row[assignIndices[i]] = assigns.get(relationName).get(i).arg[1].toString().trim().replaceAll(",", "&&");
                StringBuffer rowStr = new StringBuffer();
                for(int i = 0; i < row.length - 1; i++) rowStr.append(row[i]+",");
                rowStr.append(row[row.length-1]);
                DatabaseEntry theKey = new DatabaseEntry((data[1].get(j)).getBytes("UTF-8"));
                DatabaseEntry theData = new DatabaseEntry((rowStr).toString().getBytes("UTF-8"));

                updateDB.put(null, theKey, theData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if(relationDB != null) relationDB.close();
            if(updateDB != null) updateDB.close();
            myDbEnv.close();
        }
    }

    public Assign_list getAssign_list () {
        
        return (Assign_list) arg [1] ;
    }

    public One_rel_pred getOne_rel_pred () {
        
        return (One_rel_pred) arg [2] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [3] ;
    }

    public AstToken getSET () {
        
        return (AstToken) tok [1] ;
    }

    public AstToken getUPDATE () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getWHERE () {
        
        return (AstToken) tok [2] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, true, false, true} ;
    }

    public UpdateCmd setParms
    (AstToken tok0, Rel_name arg0, AstToken tok1, Assign_list arg1, AstToken tok2, One_rel_pred arg2, AstToken tok3)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* UPDATE */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* SET */
        arg [1] = arg1 ;            /* Assign_list */
        tok [2] = tok2 ;            /* WHERE */
        arg [2] = arg2 ;            /* One_rel_pred */
        tok [3] = tok3 ;            /* SEMI */
        
        InitChildren () ;
        return (UpdateCmd) this ;
    }

}
