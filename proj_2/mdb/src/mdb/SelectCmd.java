// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentNotFoundException;
import minidb.je.ExecuteHelpers;
import minidb.je.MyDbEnv;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import static minidb.je.ExecuteHelpers.READ_ONLY;

public class SelectCmd extends Select {

    final public static int ARG_LENGTH = 3 ;
    final public static int TOK_LENGTH = 3 ;

    public void execute () {
        
        super.execute();

        System.out.println(getContentsOfSelectedTables());
    }

    private String getContentsofSingleTable(Database relationDB, AstCursor c, DatabaseEntry relationMetaData) throws UnsupportedEncodingException {
        String relationName = c.node.toString().trim();
        if(relationName.equals("ALL"))
            return(getContentsOfAllTables());
        if(!ExecuteHelpers.isTablePresent(relationDB, relationName, relationMetaData))
            return("\nRelation not present : " + relationName);
        return ExecuteHelpers.getSelectData(new String(relationMetaData.getData(), "UTF-8"));
    }

    private String getContentsOfSelectedTables() {
        MyDbEnv myDbEnv = new MyDbEnv();
        Database relationDB = null;
        StringBuffer contents = new StringBuffer();

        try {
            myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_ONLY);
            relationDB = myDbEnv.getDB("relationDB", READ_ONLY);
            DatabaseEntry relationMetaData = new DatabaseEntry();
            AstCursor c = new AstCursor();
            for (c.FirstElement(getRel_list()); c.MoreElement(); c.NextElement()) {
                contents.append(getContentsofSingleTable(relationDB, c, relationMetaData));
                contents.append("\n-----------------------\n");
            }
        } catch(EnvironmentNotFoundException e) {
            System.err.println("Database is currently empty!!.");
            return "";
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } finally {
            if(relationDB != null) relationDB.close();
            myDbEnv.close();
        }
        return contents.toString();
    }

    private static String getContentsOfAllTables()
            throws DatabaseException {
        ArrayList<String> relations = ExecuteHelpers.getAllRowsOfTable("relationDB");
        StringBuffer displayString = new StringBuffer();
        for(int i = 0; i < relations.size(); i++) {
            String relationName = relations.get(i);
            displayString.append(ExecuteHelpers.getSelectData(relationName));
            displayString.append("\n");
        }
        return displayString.toString();
    }

    public AstToken getFROM () {
        
        return (AstToken) tok [1] ;
    }

    public Proj_list getProj_list () {
        
        return (Proj_list) arg [0] ;
    }

    public Rel_list getRel_list () {
        
        return (Rel_list) arg [1] ;
    }

    public AstToken getSELECT () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [2] ;
    }

    public WherePred getWherePred () {
        
        AstNode node = arg[2].arg [0] ;
        return (node != null) ? (WherePred) node : null ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, false, true} ;
    }

    public SelectCmd setParms
    (AstToken tok0, Proj_list arg0, AstToken tok1, Rel_list arg1, AstOptNode arg2, AstToken tok2)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* SELECT */
        arg [0] = arg0 ;            /* Proj_list */
        tok [1] = tok1 ;            /* FROM */
        arg [1] = arg1 ;            /* Rel_list */
        arg [2] = arg2 ;            /* [WherePred] */
        tok [2] = tok2 ;            /* SEMI */
        
        InitChildren () ;
        return (SelectCmd) this ;
    }

}
