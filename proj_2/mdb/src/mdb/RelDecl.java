// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import minidb.je.ExecuteHelpers;
import minidb.models.Relation;

import static minidb.je.ExecuteHelpers.READ_WRITE;

public class RelDecl extends Decl_rel {

    final public static int ARG_LENGTH = 2;
    final public static int TOK_LENGTH = 5;

    public void execute() {

        super.execute();

        createNewRelation();
        ExecuteHelpers.allRelations = ExecuteHelpers.getAllRowsOfTable("relationDB");

    }

    private void createNewRelation() {
        // Encapsulates the database environment and databases.
        String relName = getRel_name().toString().trim();

        //Check if relation is already present.
//        if(ShowDb.findRelation(relName)) {
//            System.out.println(relName + " is already created. Try something else");
//            return;
//        }
        StringBuilder dataString = new StringBuilder(relName+",");
        AstCursor c = new AstCursor();
        for (c.FirstElement(getFld_decl_list()); c.MoreElement(); c.NextElement())
            dataString.append(c.node.arg[0].toString().trim()+":"+c.node.arg[1].toString().trim()+",");

        Relation r = new Relation(dataString.toString());
        r.setRelationName(relName);

        DatabaseEntry theRelKey, theRelData;
        Database relationDB = null;
//        MyDbEnv myDbEnv = null;

        try {
//            myDbEnv = new MyDbEnv();
//            myDbEnv.setup(ExecuteHelpers.myDbEnvPath, READ_WRITE);
//            theRelKey = new DatabaseEntry(((System.currentTimeMillis() / 1000L) + "").getBytes("UTF-8"));
            theRelKey = new DatabaseEntry((relName).getBytes("UTF-8"));
            theRelData = new DatabaseEntry(r.data().getBytes("UTF-8"));
            relationDB = ExecuteHelpers.myDbEnv.getDB("relationDB", READ_WRITE);

            if(ExecuteHelpers.isTablePresent(relationDB, relName)) {
                System.err.println(relName + " is already created. Try something else");
                return;
            }
            relationDB.put(null, theRelKey, theRelData);
            System.out.println("Successfully inserted ... " + r.getRelationName());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           relationDB.close();
//           myDbEnv.close();
        }
    }

    public AstToken getCREATE() {

        return (AstToken) tok[0];
    }

    public Fld_decl_list getFld_decl_list() {

        return (Fld_decl_list) arg[1];
    }

    public AstToken getLP() {

        return (AstToken) tok[2];
    }

    public AstToken getRP() {

        return (AstToken) tok[3];
    }

    public Rel_name getRel_name() {

        return (Rel_name) arg[0];
    }

    public AstToken getSEMI() {

        return (AstToken) tok[4];
    }

    public AstToken getTABLE() {

        return (AstToken) tok[1];
    }

    public boolean[] printorder() {

        return new boolean[]{true, true, false, true, false, true, true};
    }

    public RelDecl setParms
            (AstToken tok0, AstToken tok1, Rel_name arg0, AstToken tok2, Fld_decl_list arg1, AstToken tok3, AstToken tok4) {

        arg = new AstNode[ARG_LENGTH];
        tok = new AstTokenInterface[TOK_LENGTH];

        tok[0] = tok0;            /* CREATE */
        tok[1] = tok1;            /* TABLE */
        arg[0] = arg0;            /* Rel_name */
        tok[2] = tok2;            /* LP */
        arg[1] = arg1;            /* Fld_decl_list */
        tok[3] = tok3;            /* RP */
        tok[4] = tok4;            /* SEMI */

        InitChildren();
        return (RelDecl) this;
    }

}
